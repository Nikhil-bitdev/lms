import { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';
import LoadingSpinner from '../components/LoadingSpinner';
import QuickAssignmentUpload from '../components/assignments/QuickAssignmentUpload';
import { courseService } from '../services/courseService';
import { assignmentService } from '../services/assignmentService';
import { 
  PlusIcon, 
  DocumentTextIcon, 
  AcademicCapIcon,
  ClipboardDocumentListIcon,
  BookOpenIcon,
  ClockIcon,
  CheckCircleIcon
} from '@heroicons/react/24/outline';

const DashboardPage = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [loading, setLoading] = useState(true);
  const [dashboardData, setDashboardData] = useState({
    courses: [],
    assignments: [],
    coursesCount: 0,
    pendingAssignments: 0,
    upcomingQuizzes: 0
  });

  useEffect(() => {
    if (user) {
      fetchDashboardData();
    }
  }, [user]);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      const [coursesResponse, assignmentsResponse] = await Promise.all([
        courseService.getMyCourses(),
        assignmentService.getUserAssignments()
      ]);

      const courses = Array.isArray(coursesResponse) ? coursesResponse : [];
      const assignments = assignmentsResponse?.assignments || [];

      // For students, calculate pending assignments
      const now = new Date();
      const pendingAssignments = assignments.filter(assignment => {
        const dueDate = new Date(assignment.dueDate);
        return dueDate > now && !assignment.isSubmitted;
      });

      setDashboardData({
        courses,
        assignments,
        coursesCount: courses.length,
        pendingAssignments: pendingAssignments.length,
        upcomingQuizzes: 0 // TODO: Implement quizzes
      });
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (!user) {
    return <LoadingSpinner />;
  }

  if (loading) {
    return <LoadingSpinner />;
  }

  const isTeacher = user.role === 'teacher' || user.role === 'admin';
  const isStudent = user.role === 'student';

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
        
        {/* Hero Welcome Section */}
        <div className="relative overflow-hidden bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 rounded-2xl shadow-2xl">
          <div className="absolute inset-0 bg-black opacity-10"></div>
          <div className="absolute inset-0" style={{
            backgroundImage: 'radial-gradient(circle at 20% 50%, rgba(255,255,255,0.1) 0%, transparent 50%), radial-gradient(circle at 80% 80%, rgba(255,255,255,0.1) 0%, transparent 50%)'
          }}></div>
          <div className="relative px-8 py-12">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-4xl font-bold text-white mb-2">
                  Welcome back, {user.firstName}! ðŸ‘‹
                </h1>
                <p className="text-xl text-white/90">
                  {isTeacher 
                    ? 'Ready to inspire minds today?'
                    : 'Continue your learning journey'}
                </p>
              </div>
              <div className="hidden md:block">
                <div className="bg-white/20 backdrop-blur-sm rounded-full p-4">
                  <AcademicCapIcon className="h-16 w-16 text-white" />
                </div>
              </div>
            </div>
            
            {/* Quick Stats Bar */}
            <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                <div className="flex items-center gap-3">
                  <div className="bg-white/20 rounded-lg p-3">
                    <BookOpenIcon className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <p className="text-white/80 text-sm">Total Courses</p>
                    <p className="text-white text-2xl font-bold">{dashboardData.coursesCount}</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                <div className="flex items-center gap-3">
                  <div className="bg-white/20 rounded-lg p-3">
                    <ClipboardDocumentListIcon className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <p className="text-white/80 text-sm">{isTeacher ? 'Total Assignments' : 'Pending Tasks'}</p>
                    <p className="text-white text-2xl font-bold">{isStudent ? dashboardData.pendingAssignments : dashboardData.assignments.length}</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                <div className="flex items-center gap-3">
                  <div className="bg-white/20 rounded-lg p-3">
                    <CheckCircleIcon className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <p className="text-white/80 text-sm">Completion Rate</p>
                    <p className="text-white text-2xl font-bold">
                      {dashboardData.assignments.length > 0 
                        ? Math.round(((dashboardData.assignments.length - dashboardData.pendingAssignments) / dashboardData.assignments.length) * 100)
                        : 0}%
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Actions Section */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
                  <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                    Quick Actions
                  </span>
                </h2>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {isTeacher && (
                  <>
                    <button
                      onClick={() => setShowUploadModal(true)}
                      className="group relative overflow-hidden bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-6 hover:shadow-lg transition-all duration-300 border border-green-200 dark:border-green-800 hover:scale-105"
                    >
                      <div className="flex items-start gap-4">
                        <div className="bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg p-3 group-hover:scale-110 transition-transform">
                          <ClipboardDocumentListIcon className="h-6 w-6 text-white" />
                        </div>
                        <div className="text-left flex-1">
                          <h3 className="font-bold text-gray-900 dark:text-white mb-1">Upload Assignment</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-300">Create new assignment for your courses</p>
                        </div>
                      </div>
                    </button>

                    <button
                      onClick={() => navigate('/assignments')}
                      className="group relative overflow-hidden bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-6 hover:shadow-lg transition-all duration-300 border border-purple-200 dark:border-purple-800 hover:scale-105"
                    >
                      <div className="flex items-start gap-4">
                        <div className="bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg p-3 group-hover:scale-110 transition-transform">
                          <DocumentTextIcon className="h-6 w-6 text-white" />
                        </div>
                        <div className="text-left flex-1">
                          <h3 className="font-bold text-gray-900 dark:text-white mb-1">View Submissions</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-300">Review and grade student work</p>
                        </div>
                      </div>
                    </button>
                  </>
                )}

                {isStudent && (
                  <>
                    <button
                      onClick={() => navigate('/courses')}
                      className="group relative overflow-hidden bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-6 hover:shadow-lg transition-all duration-300 border border-blue-200 dark:border-blue-800 hover:scale-105"
                    >
                      <div className="flex items-start gap-4">
                        <div className="bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg p-3 group-hover:scale-110 transition-transform">
                          <BookOpenIcon className="h-6 w-6 text-white" />
                        </div>
                        <div className="text-left flex-1">
                          <h3 className="font-bold text-gray-900 dark:text-white mb-1">Browse Courses</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-300">Discover new learning opportunities</p>
                        </div>
                      </div>
                    </button>

                    <button
                      onClick={() => navigate('/assignments')}
                      className="group relative overflow-hidden bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 rounded-xl p-6 hover:shadow-lg transition-all duration-300 border border-orange-200 dark:border-orange-800 hover:scale-105"
                    >
                      <div className="flex items-start gap-4">
                        <div className="bg-gradient-to-br from-orange-500 to-red-600 rounded-lg p-3 group-hover:scale-110 transition-transform">
                          <ClipboardDocumentListIcon className="h-6 w-6 text-white" />
                        </div>
                        <div className="text-left flex-1">
                          <h3 className="font-bold text-gray-900 dark:text-white mb-1">My Assignments</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-300">View and submit your work</p>
                        </div>
                      </div>
                    </button>
                  </>
                )}
                
                <button
                  onClick={() => navigate('/courses')}
                  className="group relative overflow-hidden bg-gradient-to-br from-cyan-50 to-blue-50 dark:from-cyan-900/20 dark:to-blue-900/20 rounded-xl p-6 hover:shadow-lg transition-all duration-300 border border-cyan-200 dark:border-cyan-800 hover:scale-105"
                >
                  <div className="flex items-start gap-4">
                    <div className="bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg p-3 group-hover:scale-110 transition-transform">
                      <AcademicCapIcon className="h-6 w-6 text-white" />
                    </div>
                    <div className="text-left flex-1">
                      <h3 className="font-bold text-gray-900 dark:text-white mb-1">My Courses</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-300">Access your {isTeacher ? 'teaching' : 'enrolled'} courses</p>
                    </div>
                  </div>
                </button>

                <button
                  onClick={() => navigate('/materials')}
                  className="group relative overflow-hidden bg-gradient-to-br from-amber-50 to-yellow-50 dark:from-amber-900/20 dark:to-yellow-900/20 rounded-xl p-6 hover:shadow-lg transition-all duration-300 border border-amber-200 dark:border-amber-800 hover:scale-105"
                >
                  <div className="flex items-start gap-4">
                    <div className="bg-gradient-to-br from-amber-500 to-yellow-600 rounded-lg p-3 group-hover:scale-110 transition-transform">
                      <DocumentTextIcon className="h-6 w-6 text-white" />
                    </div>
                    <div className="text-left flex-1">
                      <h3 className="font-bold text-gray-900 dark:text-white mb-1">Course Materials</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-300">Access learning resources</p>
                    </div>
                  </div>
                </button>
              </div>
            </div>
          </div>

          {/* Activity Feed / Upcoming */}
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700">
            <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">Upcoming Deadlines</h2>
            <div className="space-y-3">
              {dashboardData.assignments.slice(0, 5).map((assignment, index) => (
                <div key={index} className="flex items-start gap-3 p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
                  <div className="flex-shrink-0 mt-1">
                    <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                      {assignment.title}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      Due: {new Date(assignment.dueDate).toLocaleDateString()}
                    </p>
                  </div>
                  <ClockIcon className="h-4 w-4 text-gray-400" />
                </div>
              ))}
              {dashboardData.assignments.length === 0 && (
                <div className="text-center py-8">
                  <CheckCircleIcon className="h-12 w-12 text-gray-300 dark:text-gray-600 mx-auto mb-2" />
                  <p className="text-sm text-gray-500 dark:text-gray-400">No upcoming deadlines</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Recent Courses Section */}
        <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 border border-gray-100 dark:border-gray-700">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
              <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                {isTeacher ? 'My Courses' : 'Enrolled Courses'}
              </span>
            </h2>
            <Link 
              to="/courses" 
              className="text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 flex items-center gap-1 group"
            >
              View All
              <svg className="h-4 w-4 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </Link>
          </div>
          
          {dashboardData.courses.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {dashboardData.courses.slice(0, 6).map((course) => (
                <Link
                  key={course.id}
                  to={`/courses/${course.id}`}
                  className="group relative bg-gradient-to-br from-gray-50 to-white dark:from-gray-700/50 dark:to-gray-800/50 rounded-xl p-5 border border-gray-200 dark:border-gray-600 hover:shadow-xl transition-all duration-300 hover:scale-105"
                >
                  <div className="absolute top-0 right-0 m-3">
                    <div className="bg-blue-100 dark:bg-blue-900/50 rounded-full p-2">
                      <BookOpenIcon className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                    </div>
                  </div>
                  
                  <h3 className="font-bold text-gray-900 dark:text-white mb-2 pr-10 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                    {course.title}
                  </h3>
                  <p className="text-xs font-mono text-gray-500 dark:text-gray-400 mb-3">
                    {course.code}
                  </p>
                  <div className="flex items-center text-xs text-gray-600 dark:text-gray-300 mb-2">
                    <AcademicCapIcon className="h-4 w-4 mr-2 text-purple-500" />
                    {course.teacher ? `${course.teacher.firstName} ${course.teacher.lastName}` : 'Instructor'}
                  </div>
                  {course.enrollmentCount !== undefined && (
                    <div className="flex items-center text-xs text-gray-500 dark:text-gray-400">
                      <svg className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                      </svg>
                      {course.enrollmentCount} students
                    </div>
                  )}
                </Link>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="bg-gray-100 dark:bg-gray-700/50 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4">
                <BookOpenIcon className="h-10 w-10 text-gray-400" />
              </div>
              <p className="text-gray-600 dark:text-gray-300 font-medium mb-2">
                {isTeacher ? 'No courses assigned yet' : 'No courses enrolled yet'}
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
                {isTeacher 
                  ? 'Contact your administrator to get courses assigned' 
                  : 'Browse available courses and start your learning journey'}
              </p>
              <Link 
                to="/courses"
                className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-medium hover:from-blue-700 hover:to-purple-700 transition-all shadow-lg hover:shadow-xl"
              >
                <PlusIcon className="h-5 w-5" />
                {isTeacher ? 'View All Courses' : 'Browse Courses'}
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
                {isTeacher ? 'View All Courses' : 'Browse Courses'}
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>

      {/* Upload Assignment Modal */}
      {showUploadModal && (
        <QuickAssignmentUpload 
          onClose={() => setShowUploadModal(false)}
          onSuccess={fetchDashboardData}
        />
      )}
    </div>
  );
};

export default DashboardPage;
      {/* Recent Assignments */}
      {isStudent && (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-gray-800 dark:text-white">
              Recent Assignments
            </h2>
            <Link 
              to="/assignments" 
              className="text-sm text-blue-600 dark:text-blue-400 hover:underline"
            >
              View All
            </Link>
          </div>
          
          {dashboardData.assignments.length > 0 ? (
            <div className="space-y-3">
              {dashboardData.assignments.slice(0, 5).map((assignment) => {
                const dueDate = new Date(assignment.dueDate);
                const now = new Date();
                const isOverdue = dueDate < now && !assignment.isSubmitted;
                const isPending = dueDate > now && !assignment.isSubmitted;
                
                return (
                  <Link
                    key={assignment.id}
                    to={`/assignments/${assignment.id}`}
                    className="block border dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <h3 className="font-semibold text-gray-800 dark:text-white mb-1">
                          {assignment.title}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          {assignment.Course?.title || 'Course'}
                        </p>
                        <div className="flex items-center text-xs text-gray-500 dark:text-gray-400">
                          <ClockIcon className="h-4 w-4 mr-1" />
                          Due: {dueDate.toLocaleDateString()} at {dueDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </div>
                      </div>
                      <div>
                        {assignment.isSubmitted ? (
                          <span className="px-3 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 text-xs font-medium rounded-full">
                            Submitted
                          </span>
                        ) : isOverdue ? (
                          <span className="px-3 py-1 bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 text-xs font-medium rounded-full">
                            Overdue
                          </span>
                        ) : isPending ? (
                          <span className="px-3 py-1 bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 text-xs font-medium rounded-full">
                            Pending
                          </span>
                        ) : null}
                      </div>
                    </div>
                  </Link>
                );
              })}
            </div>
          ) : (
            <div className="text-center py-8">
              <ClipboardDocumentListIcon className="h-12 w-12 mx-auto text-gray-400 mb-2" />
              <p className="text-gray-600 dark:text-gray-300">
                No assignments yet
              </p>
            </div>
          )}
        </div>
      )}

      {/* Quick Assignment Upload Modal */}
      <QuickAssignmentUpload
        isOpen={showUploadModal}
        onClose={() => setShowUploadModal(false)}
        onSuccess={() => {
          // Optionally refresh data or show success message
        }}
      />
    </div>
  );
};

export default DashboardPage;